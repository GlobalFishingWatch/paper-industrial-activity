#StandardSql
# Match AIS vessel detections to Sentinel-1 vessel detections

CREATE TEMP FUNCTION toDAY() AS (DATE('{{ YYYY_MM_DD }}'));
CREATE TEMP FUNCTION yesterDAY() AS (DATE_SUB(toDAY(), INTERVAL 1 DAY));
CREATE TEMP FUNCTION tomorrow() AS (DATE_ADD(toDAY(), INTERVAL 1 DAY));
CREATE TEMP FUNCTION YYYYMMDD(d DATE) AS (
  # Format a date as YYYYMMDD
  # e.g. DATE('2018-01-01') => '20180101'
  FORMAT_DATE('%Y%m%d',
    d) );

CREATE TEMP FUNCTION bilinear_interpolation(Q11 float64,
Q12 float64, Q22 float64, Q21 float64, x1 float64, x2 float64,
y1 float64, y2 float64, x float64, y float64) AS (
    # see https://en.wikipedia.org/wiki/Bilinear_interpolation
    # Q11 is the value at x1, y1, Q12 is the value at x1, y2, etc.
    # x and y are the coordinates we want the value for
    1/( (x2 - x1) * (y2 - y1)) * 
      (             
         Q11 * (x2 - x) * (y2 - y)  
       + Q21 * (x - x1) * (y2 - y)
       + Q12 * (x2 - x) * (y - y1)
       + Q22 * (x - x1) * (y - y1)
      )
    );   

create temp function colmax(x float64, y float64) as (
  if(x > y, x, y)
);

create temp function radians(x float64) as (
  3.14159265359 * x / 180
);

create temp function deglat2km() as (
  111.699
);

create temp function kilometers_per_nautical_mile() as (
  1.852
);

create temp function map_label(label string) 
as (
  case when label ="drifting_longlines" then "drifting_longlines"
  when label ="purse_seines" then "purse_seines"
  when label ="other_purse_seines" then "purse_seines"
  when label ="tuna_purse_seines" then "purse_seines"
  when label ="cargo_or_tanker" then "cargo_or_tanker"
  when label ="cargo" then "cargo_or_tanker"
  when label ="tanker" then "cargo_or_tanker"
  when label ="tug" then "tug"
  when label = "trawlers" then "trawlers"
  else "other" end
);

create temp function map_speed(x float64) as (
  case 
  when x < 2 then 0
  when x < 4 then 2
  when x < 6 then 4
  when x < 8 then 6
  when x < 10 then 8
  else 10 end 
);
 
create temp function map_minutes(x float64) as (
  case when x < -384 then  -512
  when x < -256 then -384
  when x < -192 then -256
  when x < -128 then -192
  when x < -96 then -128
  when x < -64 then -96
  when x < -48 then -64
  when x < -32 then -48
  when x < -24 then -32
  when x < -16 then -24
  when x < -12 then -16
  when x < -8 then -12
  when x < -6 then -8
  when x < -4 then -6
  when x < -3 then -4
  when x < -2 then -3
  when x < -1 then -2
  when x < 0 then -1
  when x < 1 then 0
  when x < 2 then 1
  when x < 3 then 2
  when x < 4 then 3
  when x < 6 then 4
  when x < 8 then 6
  when x < 12 then 8
  when x < 16 then 12
  when x < 24 then 16
  when x < 32 then 24
  when x < 48 then 32
  when x < 64 then 48
  when x < 96 then 64
  when x < 128 then 96
  when x < 192 then 128
  when x < 256 then 192
  when x < 384 then 256
  else 384 end);

CREATE TEMP FUNCTION reasonable_lon(lon float64) AS 
  (case when lon > 180 then lon - 360
  when lon < -180 then lon + 360
  else lon end
);

 
CREATE TEMP FUNCTION earth_radius_km(lat float64) as 
-- this is super overkill. You could just use the average
-- radius of the earth. But I wanted to see if it made a difference.
-- It matters if you want > 4 significant digits. 
-- But, once I made it, I didn't feel like deleting it. 
-- Equation taken from https://rechneronline.de/earth-radius/
((
select 
  --  R = √ [ (r1² * cos(B))² + (r2² * sin(B))² ] / [ (r1 * cos(B))² + (r2 * sin(B))² ]
  pow(
  ( pow(r1*r1 * cos(B),2) + pow(r2*r2 * sin(B),2) )
  /
  ( pow(r1 * cos(B),2) + pow(r2 * sin(B), 2) )
  ,.5)
    from
    (select  
    6371.001 as r1,  
    6356.752 as r2,
    Radians(lat) as B)
    limit 1
));
 
 
with 
######################################
-- Data sources
######################################
--
-- Satellite locations. Get the day before and after just in case there is a 
-- scene at the day boundary. This table has one value every second.
sat_positions as (select time, sat , lon, lat, altitude 
           from `project-id.satellite_positions_v20190208.sentinel_1_positions*`
            where _table_suffix between YYYYMMDD(yesterday()) and YYYYMMDD(tomorrow()) ),
--
--
-- sar detections
sar_detections as (select * from
 `{{ detect_table }}*`
 where _table_suffix = YYYYMMDD(today())-- select 
-- lat as detect_lat, 
-- long as detect_lon, 
-- timestamp as detect_timestamp,
-- ACQ as scene_id,
-- CONCAT(ACQ, CAST(lat AS string), CAST(long AS string)) as detect_id
-- from 
--  `scratch_bjorn.SAR_detections_april`
--  where date(timestamp) = today()
 ),

-- sar footprints, used for start and end time. 
sat_footprints as (select distinct id as scene_id, start_time, end_time
           from `{{ detect_table }}*`
          where _table_suffix = YYYYMMDD(today()) 
         ),

-- 
-- raster probability. "mirror_nozeroes" means that all rows with zero values
-- have been removed, and negative i values have been removed (the raster is 
-- symetrical around the i axis because a vessel is just as likely to turn left
-- as it is to turn right). 
prob_raster as (select * from 
 `project-id.gfw_research_precursors.point_cloud_mirror_nozeroes_fishing_v20190502`
 ),
--
-- Table we are trawing AIS messages from
vms_position_table as (
  select * from 
  `project-id.{{ vms_dataset }}.messages_scored_*` 
  where _table_suffix between YYYYMMDD(yesterDay()) and YYYYMMDD(tomorrow())
),
--


--
##################################
# Probability raster adjustments
##################################

# this is to mirror score_ais_match_sql.j2
probability_table as (select * from prob_raster),

--
--
-- weight is a measure of how concetrated the raster is, and is used to assess score
-- unlike score_ais_match.sql.j2, this doesn't have differnt vessel classes
-- future versions can change the vessel class here
weights as (
select 
  # this is because the value at 0 is not mirrored
  sum(if(i>0, 2*probability *probability, probability *probability )) as weight,
  minutes_lower,
  speed_lower
from
  probability_table
group by 
  minutes_lower,
  speed_lower
),
--
-- combine probabilities and weights into one table
probabilities_and_weights as (
select * from
  probability_table
join
  weights
using(minutes_lower,speed_lower)
),
--
-- 
-- the raster has only positive i values because it is symmetrical
-- around the i axis (the boat is as equally likely to turn left as right).
-- Make a full raster with negative values for the later join.
probabilities_and_weights_neg as (
select 
minutes_lower, speed_lower, probability, i, j, weight  
from 
probabilities_and_weights
union all
select
-- same except take negative i!
minutes_lower, speed_lower, probability, -i as i, j, weight 
from 
probabilities_and_weights
where i >0
),
#########################
##
## SAR subqueries
##
#########################
--
--
-- start position of the satellite for each image
detections as (
select lat as detect_lat, 
lon as detect_lon, 
TIMESTAMP_ADD(start_time, INTERVAL   cast(timestamp_diff(end_time, start_time, SECOND)/2 as int64) SECOND) as detect_timestamp,
id as scene_id,
CONCAT(id, CAST(lat AS string), CAST(lon AS string)) as detect_id
from sar_detections
),
--
--
-- start position of the satellite for each image
start_pos as (
select 
scene_id, start_time, 
lat as start_lat,
lon as start_lon,
sat as sat_start,
altitude as start_altitude
from sat_footprints
join sat_positions
on start_time = time
and SUBSTR(scene_id, 3, 1) = UPPER(substr(sat,2,1))),


-- end position of the satellite for each image
end_pos as (
select 
scene_id, 
end_time, 
lat as end_lat,
lon as end_lon,
sat as sat_end,
altitude as end_altitude,
from sat_footprints
join sat_positions
on end_time = time
and SUBSTR(scene_id, 3, 1) = UPPER(substr(sat,2,1))),

-- calcuate the direction and speed and altitude of the satellite
deltas as (
select 
(end_lat - start_lat) * 111 as N_km,
(end_lon - start_lon) * 111 * cos( radians(end_lat/2 +start_lat/2) ) as E_km,
end_lat/2 +start_lat/2 as avg_lat,
start_lat, 
start_lon,
end_lat,
end_lon,
start_altitude,
end_altitude,
start_time,
end_time,
scene_id
from end_pos
join
start_pos 
using(scene_id)),
--
-- What direction is the satellite traveling in each scene?
sat_directions as (
select
scene_id,
ATAN2(E_Km,N_km)*180/3.1416 sat_course, -- convert to degrees from radians
start_lat as sat_start_lat, 
start_lon as sat_start_lon,
start_altitude,
end_altitude,
timestamp_diff(end_time, start_time, second) seconds,
end_lat as sat_end_lat,
end_lon as sat_end_lon,
from deltas),
--
-- Calculate speed of satellite for each scene
-- speed of satellite varies a small ammount, so don't really need to calculate
-- for each scene. But hey -- why not calculate it directly? 
sat_directions_with_speed as (
select 
st_distance(st_geogpoint(sat_start_lon, sat_start_lat), st_geogpoint(sat_end_lon, sat_end_lat)) -- distance between points in meters
* (earth_radius_km(sat_end_lat) + start_altitude/1000)/ earth_radius_km(sat_end_lat) -- multiply by a factor to account for satellite altitude
/ seconds  -- make it meters per second
*1/1852 * 3600 -- * 1 nautical mile / 1852 meters   * 3600 seconds/ hour 
as satellite_knots,
*
from sat_directions),
--
--
--
############################
##
## VMS subquery
##
###########################
-- 
-- lag and lead AIS messages
ais_messages_lagged_led as (  
select 
  source,
  seg_id,
  lat,
  lon,
  timestamp,
  course,
  speed,
  ssvid,
  distance_from_shore_m,
  LEAD(timestamp,1) OVER (PARTITION BY seg_id ORDER BY timestamp) timestamp_after,
  LAG(timestamp,1) OVER (PARTITION BY seg_id ORDER BY timestamp) timestamp_before,
  date(timestamp) date 
from 
  vms_position_table 
where
  abs(lat) <= 90 and abs(lon) <= 180                               
  and speed < 50
  -- ignore the really fast vessels... most are noise
  -- this could just ignore speeds of 102.3                                                     
),
--
--
-- join on image times to get before and after
best_messages as (
select 
  source,
  a.ssvid ssvid, lat, lon, speed
  ,course, timestamp, 
  distance_from_shore_m,
  timestamp_diff(detect_timestamp, timestamp, SECOND) / 60.0 
  as delta_minutes,
  scene_id,
  detect_timestamp,
  detect_id,
  detect_lon,
  detect_lat,
  # the following two help a later join. Basically, we want to know if there is another image to join
  (timestamp_before is not null and abs(timestamp_diff(detect_timestamp, timestamp_before, SECOND)) / 60.0 < 9*60 ) previous_exists,
  (timestamp_after is not null and abs(timestamp_diff(detect_timestamp, timestamp_after, SECOND)) / 60.0 < 9*60 ) after_exists
from 
  ais_messages_lagged_led a
join 
  detections
on 
  abs(timestamp_diff(detect_timestamp, timestamp, SECOND)) / 60.0  < 9*60 # less than 5 hours
  and st_distance(st_geogpoint(lon, lat), st_geogpoint(detect_lon, detect_lat)) < 100*1852 -- within 100 nautical miles of the detection
 -- Timestamps just before or after
 -- Note that it is really tricky to consider the null value cases, and it makes things a mess later
 and( 
       (timestamp <= detect_timestamp # timestamp is right before the image
       AND timestamp_after > detect_timestamp ) 
    or (timestamp <= detect_timestamp 
       and timestamp_after is null)  
    or (timestamp > detect_timestamp # timestamp is right after the image
       AND timestamp_before <= detect_timestamp ) 
    or (timestamp > detect_timestamp 
       and timestamp_before is null)  
  )  
),
--
--
####################################
# Figure out adjustment to account for the friggn' doppler shift
###################################
--
-- Get the interpolated position of each vessel
-- at the moment of the SAR image
interpolated_positions as (
SELECT
  lat + cos(radians(course)) -- x component
  *speed*delta_minutes/60 -- nautical miles (knots * minutes / (60 minutes / hour) )
  / 60  -- divided by the nautical miles per degree lat, 
  -- which is 60 nautical miles per degree (really it is 59.9, and varies by lat)
  as lat_interpolate,    
  reasonable_lon( 
     lon + sin(radians(course)) -- y component
     *speed*delta_minutes/60 -- nautical miles (knots * minutes / (60 minutes / hour) )
     /(60*cos(radians(lat)))) -- divided by the nautical miles per degree lon,
  -- which is 60 times the cos of the lat (really it is 59.9, and varies by lat)
  as lon_interpolate,
  *
FROM 
  best_messages),
--
-- Get distance from the likely position of the vessel to the satellite,
-- and the speed of the vessel perpendicular to the satellite.
interpolated_positions_compared_to_satellite as (
select 
   *,
   speed * sin(radians( course - sat_course)) as vessel_speed_perpendicular_to_sat,
   st_distance(safe.st_geogpoint(lon_interpolate, lat_interpolate), -- likely location of vessel 
               ST_MAKELINE( safe.ST_GEOGPOINT(sat_start_lon, sat_start_lat), (safe.ST_GEOGPOINT(sat_end_lon, sat_end_lat) ) ) ) -- line of satellite
               / 1852 -- convert from meters to nautical miles, because
               as vessel_distance_to_sat_nm
from 
  interpolated_positions
join
  sat_directions_with_speed
using(scene_id)
),
--
-- using satellite speed, vessel speed perpendicular to satellite direction of travel,
-- and the distance of the vessel to the satellite, calculate the distance the vessel
-- will be offset in the direction of the satellite is traveling. 
interpolated_positions_adjust_formula as (
select 
 *,
 vessel_speed_perpendicular_to_sat / satellite_knots
 * pow( ( pow(vessel_distance_to_sat_nm,2) + pow(start_altitude,2)/pow(1852,2) ) , .5)  
  -- divide by 1852 to convert meters to nautical miles, 
  -- then use pathangerean theorm to get the approximate distance to the satellite in 
  -- nautical miles. 
  as adjusted_nautical_miles_parallel_to_sat
from 
  interpolated_positions_compared_to_satellite
),
--
-- 
-- Adjust each lat and lon by the doppler shift. Note the subtraction. If a vessel is traveling
-- perpendicular to the satellite's motion, going away from the satellite, the vessel will
-- appear offset parallel to the satellites motion opposite the direction the vessel is traveling.
-- Believe me! It works!
best_messages_adjusted as (
select 
  * except(lon,lat),
  lat - adjusted_nautical_miles_parallel_to_sat * cos(radians(sat_course))/60 lat, -- 60 nautical miles per degree
  lon - adjusted_nautical_miles_parallel_to_sat * sin(radians(sat_course))/(60 * cos(radians(lat))) lon, -- 60 nautical miles * cos(lat) per degree
  lat as old_lat,
  lon as old_lon
from 
  interpolated_positions_adjust_formula
),
--
####################
# joins to the probability raster
###################
--
key_query_1 as (
select *,
  deglat2km() * (detect_lon - lon) * cos(radians(lat)) as u,
  deglat2km() * (detect_lat - lat) as v,
  radians(course) as course_rads
from 
  best_messages_adjusted
),
--
-- rotate the coordinates
key_query_2 as (
select 
  *,
  cos(course_rads) * u - sin(course_rads) * v as x,
  cos(course_rads) * v + sin(course_rads) * u as y,
  -- rotation of coordinates, described here: https://en.wikipedia.org/wiki/Rotation_of_axes
  -- Note that our u and v / x and y are switched from the standard way to measure
  -- this, largely because vessels measure course from due north, moving clockwise, 
  -- while mosth math measures angle from the x axis counterclockwise. Annoying!
  -- 
  1000 / colmax(1.0, ABS(delta_minutes)) as scale
#     This is the python function we are copying here:   
#      def scale(dt):
#         return 1000.0 / max(1, abs(dt)) 
from 
  key_query_1
),
--
-- adjust by scale -- that is the probability raster will be scalled
-- based on how long before or after the ping the image was taken. 
-- Also, move the raster so that 0,0 is where the vessel would be
-- if it traveled in a straight line. 
key_query_3 as
(
select * from (
  select *,
    x * scale as x_key,
    (y - speed*kilometers_per_nautical_mile()*delta_minutes/60 ) * scale  as y_key,
    # Map these values to the values in the probability rasters
    map_speed(speed) as speed_key,
    map_minutes(delta_minutes) as minute_key
  from 
    key_query_2
  ) 
where abs(x_key) <=500 and abs(y_key) <=500
),
--
--
-- Match to probability, and interpolate between 
-- the four closest values. This bilinear interpoloation
-- in theory allows us to reduce the size of the raster we are joining on
messages_with_probabilities as 
(
select 
  -- this would get the value exact, the weight_scaled 
  -- / pow((1000/(colmax( 1, probs.minutes_lower/2 + probs.minutes_upper /2))),2) * scale*scale
  * except(i, j, probability),
  bilinear_interpolation(
  ifnull(probs_11.probability,0),
  ifnull(probs_12.probability,0), 
  ifnull(probs_22.probability,0), 
  ifnull(probs_21.probability,0), 
  cast(x_key - .5 as int64), cast(x_key + .5 as int64),
  cast(y_key - .5 as int64), cast(y_key + .5 as int64) , 
  x_key, y_key) as probability,
  -- to get at least one value.
  -- weight *should* be the same for each, but we need to make sure it isn't null
  case when probs_11.weight is not null then probs_11.weight/(scale*scale) 
  when probs_12.weight is not null then probs_12.weight/(scale*scale) 
  when probs_22.weight is not null then probs_22.weight/(scale*scale) 
  when probs_21.weight is not null then probs_21.weight/(scale*scale) 
  else 0
  end
  as weight_scaled
from
  key_query_3 
left join
  --
  -- joining on four locaitons to do bilinear interpolation
probabilities_and_weights_neg  as probs_11
  on  probs_11.i = cast(x_key - .5 as int64) and probs_11.j = cast(y_key - .5 as int64) 
  and probs_11.speed_lower = cast(speed_key as int64)
  and probs_11.minutes_lower = cast(minute_key as int64)
left join
probabilities_and_weights_neg  as probs_12
  on  probs_12.i = cast(x_key -.5 as int64) and probs_12.j = cast(y_key + .5 as int64) 
  and probs_12.speed_lower = cast(speed_key as int64)
  and probs_12.minutes_lower = cast(minute_key as int64)
left join
probabilities_and_weights_neg  as probs_22
  on  probs_22.i = cast(x_key +.5 as int64) and probs_22.j = cast(y_key + .5 as int64) 
  and probs_22.speed_lower = cast(speed_key as int64)
  and probs_22.minutes_lower = cast(minute_key as int64)
left join
probabilities_and_weights_neg  as probs_21
  on  probs_21.i = cast(x_key +.5 as int64) and probs_21.j = cast(y_key - .5 as int64) 
  and probs_21.speed_lower = cast(speed_key as int64)
  and probs_21.minutes_lower = cast(minute_key as int64)
),
--
--
--
joined_detects AS (
SELECT
  a.source source, # note that this is different from the AIS table
  a.ssvid,
  a.scene_id scene_id,
  a.detect_id detect_id,
  if(a.probability is null, 0, a.probability ) a_probability,
  if(b.probability is null, 0, b.probability ) b_probability,
  if(a.weight_scaled is null, 0, a.weight_scaled ) a_weight_scaled,
  if(b.weight_scaled is null, 0, b.weight_scaled ) b_weight_scaled,
  a.scale a_scale,
  b.scale b_scale,
  a.detect_lat detect_lat,
  a.detect_lon detect_lon,
  a.timestamp a_timestamp,
  b.timestamp b_timestamp,
  a.speed a_speed,
  b.speed b_speed,   
  a.course a_course,
  b.course b_course,
  a.lat a_lat,
  a.lon a_lon,
  b.lat b_lat,
  b.lon b_lon,
  a.detect_timestamp detect_timestamp
FROM
  messages_with_probabilities a
left join
  messages_with_probabilities b
ON
  a.ssvid = b.ssvid
  AND a.detect_id = b.detect_id
  AND a.timestamp > b.timestamp 
  # the following makes sure that a message isn't included that shouldn't be
  # Basically, the left join includes things that actually join so the point gets repeated,
  # but with a null value. This fixes that problem
where not ( b.timestamp is null and (a.previous_exists or a.after_exists))
),
--
-- Apply a score to each detection to vessel 
-- This score was figured out by Tim Hochberg, who tried
-- out a series of different things.
 scored_detects as ( 
select *,
   safe_divide( (a_probability*a_weight_scaled +
    b_probability*b_weight_scaled),
a_weight_scaled + b_weight_scaled) AS score     
from joined_detects)
--
--
#################################################
# And the answer is.... 
#################################################
--
select  * from scored_detects where score > 0
